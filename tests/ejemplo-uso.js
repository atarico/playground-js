/**
 * Ejemplo de c√≥mo usar los tests para verificar tu soluci√≥n
 * 
 * Ejecuta este archivo con: node tests/ejemplo-uso.js
 */

const { testUserSolution } = require('./isogram.test.js');

// ============================================================
// EJEMPLO 1: Soluci√≥n correcta usando Set
// ============================================================
console.log('\nüìù EJEMPLO 1: Soluci√≥n usando Set\n');

function solucionConSet(input) {
  const letters = input.toLowerCase().replace(/[^a-z]/g, '');
  const uniqueLetters = new Set(letters);
  return uniqueLetters.size === letters.length;
}

testUserSolution(solucionConSet);

// ============================================================
// EJEMPLO 2: Soluci√≥n correcta usando objeto
// ============================================================
console.log('\n\nüìù EJEMPLO 2: Soluci√≥n usando objeto como contador\n');

function solucionConObjeto(input) {
  const letters = input.toLowerCase().replace(/[^a-z]/g, '');
  const seen = {};
  
  for (let letter of letters) {
    if (seen[letter]) return false;
    seen[letter] = true;
  }
  
  return true;
}

testUserSolution(solucionConObjeto);

// ============================================================
// EJEMPLO 3: Soluci√≥n correcta usando indexOf
// ============================================================
console.log('\n\nüìù EJEMPLO 3: Soluci√≥n usando indexOf\n');

function solucionConIndexOf(input) {
  const letters = input.toLowerCase().replace(/[^a-z]/g, '');
  
  for (let i = 0; i < letters.length; i++) {
    if (letters.indexOf(letters[i]) !== letters.lastIndexOf(letters[i])) {
      return false;
    }
  }
  
  return true;
}

testUserSolution(solucionConIndexOf);

// ============================================================
// EJEMPLO 4: Soluci√≥n INCORRECTA (no ignora may√∫sculas)
// ============================================================
console.log('\n\nüìù EJEMPLO 4: Soluci√≥n INCORRECTA - No ignora may√∫sculas\n');

function solucionIncorrecta1(input) {
  // ERROR: No convierte a min√∫sculas
  const letters = input.replace(/[^a-zA-Z]/g, '');
  const uniqueLetters = new Set(letters);
  return uniqueLetters.size === letters.length;
}

testUserSolution(solucionIncorrecta1);

// ============================================================
// EJEMPLO 5: Soluci√≥n INCORRECTA (no filtra caracteres)
// ============================================================
console.log('\n\nüìù EJEMPLO 5: Soluci√≥n INCORRECTA - No filtra caracteres no alfab√©ticos\n');

function solucionIncorrecta2(input) {
  // ERROR: No elimina espacios y s√≠mbolos
  const letters = input.toLowerCase();
  const uniqueLetters = new Set(letters);
  return uniqueLetters.size === letters.length;
}

testUserSolution(solucionIncorrecta2);

// ============================================================
// RESUMEN
// ============================================================
console.log('\n\n' + '='.repeat(60));
console.log('üìö RESUMEN DE EJEMPLOS');
console.log('='.repeat(60));
console.log('\n‚úÖ Ejemplos 1, 2 y 3: Soluciones correctas con diferentes enfoques');
console.log('‚ùå Ejemplos 4 y 5: Soluciones incorrectas que no cumplen todos los requisitos');
console.log('\nüí° Puntos clave:');
console.log('   1. Convertir a min√∫sculas para ignorar may√∫sculas');
console.log('   2. Filtrar solo letras (eliminar espacios, n√∫meros, s√≠mbolos)');
console.log('   3. Verificar que no haya letras repetidas');
console.log('\n');
